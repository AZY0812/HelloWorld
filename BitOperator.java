public class BitOperator {
	public static void main(String[] args) {
		
		//1. 先得到2的补码 =》2的原码 00000000 00000000 00000000 00000010
		//   2的补码 00000000 00000000 00000000 00000010
		//2. 3的补码 3的原码 00000000 00000000 00000000 00000011
		//   3的补码 00000000 00000000 00000000 00000011
		//3. 按位&
		//  00000000 00000000 00000000 00000010
		//  00000000 00000000 00000000 00000011
		//  00000000 00000000 00000000 00000010 & 运算后的补码
		// 运算后的原码是 也是 00000000 00000000 00000000 00000010
		// 结果就是（转为十进制）：2
		
		System.out.println(2 & 3);
		
		//1. 先推导-2的原码 10000000 00000000 00000000 00000010
		//2. -2的反码（符号位不变，其他位置全部取反）11111111 11111111 11111111 11111101
		//3. -2的补码（在反码上加一）11111111 11111111 11111111 11111110
		//4. ~-2的操作    00000000 00000000 00000000 00000001
		//5. 运算后的原码就是 00000000 00000000 00000000 00000001 =》1
		System.out.println(~-2);
		
		//1. 先得到2的补码 =》2的原码 00000000 00000000 00000000 00000010
		//   2的补码 00000000 00000000 00000000 00000010
		//2. ~2操作 11111111 11111111 11111111 11111101 运算后的补码
		//3. 运算后的反码 11111111 11111111 11111111 11111100
		//4. 运算后的原码 10000000 00000000 00000000 00000011 => -3
		System.out.println(~2);
		
	}
}